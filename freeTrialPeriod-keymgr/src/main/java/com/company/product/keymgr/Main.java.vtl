/*
 * Copyright (C) 2005-2015 Schlichtherle IT Services.
 * All rights reserved. Use is subject to license terms.
 */

#set($dollar = '$')
/* Generated from Velocity template at $date - DO NOT EDIT! */
package ${package}.keymgr;

import static java.lang.System.*;
import java.nio.file.Paths;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.truelicense.api.*;
#if($disableWizard == false)
import net.truelicense.swing.LicenseManagementWizard;
import javax.swing.*;
#end

/**
 * The command line interface (CLI) for consuming $subject license keys.
 * <p>
 * This class is immutable and hence trivially thread-safe.
 *
 * @author Christian Schlichtherle
 */
public enum Main {

    USAGE {
        @Override void run(final Deque<String> params) {
            throw new IllegalArgumentException();
        }
    },

    HELP {
        @Override void run(final Deque<String> params) {
            out.printf(Main.valueOf(params.pop().toUpperCase(Locale.ROOT)).help());
        }
    },

    VERSION {
        @Override void run(final Deque<String> params) {
            out.printf(message("version"), Main.class.getSimpleName());
        }
    },

    INSTALL {
        @Override void run(Deque<String> params) throws LicenseManagementException {
            manager().install(context().pathStore(Paths.get(params.pop())));
        }
    },

    LOAD {
        @Override void run(Deque<String> params) throws LicenseManagementException {
            out.println(manager().load());
        }
    },

    VERIFY {
        @Override void run(Deque<String> params) throws LicenseManagementException {
            manager().verify();
        }
    },

    UNINSTALL {
        @Override void run(Deque<String> params) throws LicenseManagementException {
            manager().uninstall();
        }
    }#if($disableWizard == true);#{else},#end

#if($disableWizard == false)

    WIZARD {
        @Override void run(Deque<String> params) throws Exception {
            SwingUtilities.invokeAndWait(new Runnable() {
                @Override public void run() {
                    try {
                        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    } catch (Exception ex) {
                        throw new AssertionError(ex);
                    }
                    final LicenseManagementWizard wizard = new LicenseManagementWizard(manager());
#if($hideUninstallAction == false)
                    wizard.setUninstallButtonVisible(true);
#end
                    exit(wizard.showModalDialog());
                }
            });
        }
    };
#end

    private static LicenseManagementContext context() {
        return manager().context();
    }

    private static ConsumerLicenseManager manager() {
        return LicenseManager.get();
    }

    /**
     * Runs this command.
     * Implementations are free to modify the given deque.
     *
     * @param params the command parameters.
     */
    abstract void run(Deque<String> params) throws Exception;

    public static void main(String... args) {
        exit(processAndHandleExceptions(args));
    }

    @SuppressWarnings("CallToThreadDumpStack")
    private static int processAndHandleExceptions(final String... args) {
        int status;
        try {
            process(args);
            status = 0;
        } catch (final IllegalArgumentException ex) {
            printUsage();
            status = 1;
        } catch (final NoSuchElementException ex) {
            printUsage();
            status = 1;
        } catch (final Throwable ex) {
            ex.printStackTrace();
            status = 2;
        }
        return status;
    }

    public static void process(final String... args) throws Exception {
        final Deque<String> params = new LinkedList<String>(Arrays.asList(args));
        final String command = upperCase(params.pop());
        valueOf(command).run(params);
    }

    private static String upperCase(String s) {
        return s.toUpperCase(Locale.ENGLISH);
    }

    private static void printUsage() {
        final StringBuilder builder = new StringBuilder(25 * 80);
        for (final Main main : values()) builder.append(main.usage());
        err.println(builder.toString());
    }

    private String usage() {
        return String.format(message("usage"), Main.class.getSimpleName());
    }

    private String help() { return message("help"); }

    String message(String key) {
        return ResourceBundle
                .getBundle(Main.class.getName())
                .getString(name() + "." + key);
    }
#if($keyMgrValidationClass == "${package}.keymgr.Main${dollar}NoLicenseValidation")

    public static final class NoLicenseValidation implements LicenseValidation {
        public void validate(License bean) {
            Logger  .getLogger(NoLicenseValidation.class.getName())
                    .log(Level.INFO, "Validating license bean: {0}", bean);
        }
    }
#end
#if($keyMgrClockClass == "${package}.keymgr.Main${dollar}SystemClock")

    public static final class SystemClock implements net.truelicense.api.misc.Clock {
        public Date now() { return new Date(); }
    }
#end
}
